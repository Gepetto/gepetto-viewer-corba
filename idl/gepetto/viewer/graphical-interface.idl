// file graphicalinterface.idl
module gepetto {
  /// Corba exception travelling through the Corba channel
  exception Error
  {
    string msg;
  };

module corbaserver {

// Comments :
// 1)  Node names are parsed, so if you call a node "node1/xxx", this node will
//     be automatically added as a child of node1
// 2)  Functions return False if an error occured (in that case, check the
//     SceneViewer-corbaserver window for more information)
// 3)  applyConfiguration doesn't move object straigh forward, you need to used
//     the "refresh" function each time you want actualize position of the Viewer.
//     This system is used to synchronize movement of all objects.

typedef float Transform [7];
typedef float Vector2 [2];
typedef float Position [3];
typedef float Color [4];
typedef unsigned long WindowID;
typedef sequence <string> Names_t; /// Sequence of names
typedef sequence<float> floatSeq;
typedef sequence<Position> PositionSeq;
typedef sequence<Transform> TransformSeq;

  interface NodeCallback {
    void selected (in string name, in Position positionInWorldFrame, in Position normalInLocalFrame) raises (Error);
  };

  /// IDL of the graphical interface.
  /// It contains the following groups:
  /// \li \ref idl_windows_and_scenes "Windows and scenes"
  /// \li \ref idl_node_creation "Node creation"
  /// \li \ref idl_node_tree_manipulation "Node tree manipulation"
  /// \li \ref idl_node_configuration "Node configuration"
  /// \li \ref idl_node_properties "Node properties"
  /// \li \ref idl_export_of_scenes_to_images_or_to_blender "Export of scenes to images or to blender"
  /// \li \ref idl_camera_manipulation "Camera manipulation"
  interface GraphicalInterface {

    /// \name Windows and scenes
    /// \anchor idl_windows_and_scenes
    /// \{

    /// Create a new window.
    /// \param input name : name of the new window.
    /// return the ID of the newly create window.
    unsigned long createWindow(in string name) raises (Error);
    unsigned long getWindowID (in string name) raises (Error);
    
    /// change the background color1
    /// \param input windowId : ID of the window
    /// \param input RGBAcolor : desired color
    boolean setBackgroundColor1(in unsigned long windowId,in Color RGBAcolor);
    
    /// change the background color2
    /// \param input windowId : ID of the window
    /// \param input RGBAcolor : desired color
    boolean setBackgroundColor2(in unsigned long windowId,in Color RGBAcolor);

    /// Create a group node.
    /// \param input sceneName : name of the group.
    void createScene(in string sceneName) raises (Error);

    /// Create a group node and a GroudNode ("sceneName/floor") as child
    /// \param input sceneName : name of the group
    void createSceneWithFloor(in string sceneName) raises (Error);

    /// Add groupNode sceneName to the WindowManager windowName so
    /// sceneName and all its children will be displayed in the window windowName.
    /// \param input sceneName : name of the groupNode.
    /// \param input windowId : ID of rhe window.
    boolean addSceneToWindow(in string sceneName, in unsigned long windowId) raises (Error);

    /// \}

    /// \name Node creation
    /// \anchor idl_node_creation
    /// \{

    /// create a floor called floorName.
    /// \param input floorName : name of the floor.
    boolean addFloor(in string floorName) raises (Error);

    /// create a box called boxName.
    /// \param input boxName : name of the box.
    /// \param input boxSize1 : lenght of the box (x axis).
    /// \param input boxSize2 : lenght of the box (y axis).
    /// \param input boxSize3 : lenght of the box (z axis).
    /// \param input RGBAcolor : Color of the box.
    boolean addBox(in string boxName, in float boxSize1, in float boxSize2, in float boxSize3, in Color RGBAcolor) raises (Error);

    /// create a box called CapsuleName.
    /// \param input CapsuleName : name of the capsule.
    /// \param input radius : radius of the capsule.
    /// \param input height : lenght of the segment that generates the capsule.
    /// \param input RGBAcolor : Color of the capsule.
    boolean addCapsule(in string capsuleName, in float radius, in float height, in Color RGBAcolorid) raises (Error);


    /// create a box called CapsuleName.
    /// \param input CapsuleName : name of the arrow.
    /// \param input radius : radius of the arrow
    /// \param input length : lenght of the arrow 
    /// \param input RGBAcolor : Color of the capsule.
    boolean addArrow(in string arrowName, in float radius, in float length, in Color RGBAcolorid) raises (Error);

    boolean addRod(in string rodName, in Color RGBAcolorid, in float radius, in float totalLength,in short maxCapsule) raises (Error);
    
    /// resize the capsule CapsuleName.
    /// \param input CapsuleName : name of the capsule.
    /// \param input height : lenght of the segment that generates the capsule.
    boolean resizeCapsule(in string capsuleName,in float height) raises (Error);

    boolean resizeArrow(in string capsuleName,in float radius, in float length) raises (Error);

    /// create a node to display a mesh (works for .dae, .obj and some other formats)
    /// \param input meshName : name of the new meshNode.
    /// \param input meshPath : full path to the mesh file.
    boolean addMesh(in string meshName, in string meshPath) raises (Error);

    /// create a node to display a mesh (works for .dae, .obj and some other formats)
    /// \param input meshName : name of the new meshNode.
    /// \param input meshPath : full path to the mesh file.
    boolean addCone(in string coneName, in float radius, in float height, in Color RGBAcolor) raises (Error);

    /// create a Cyllinder called cylinderName
    /// \param input cylinderName : name of the cylinder.
    /// \param input radius : radius of the cylinder.
    /// \param input height : lenght of the cylinder.
    /// \param input RGBAcolor : color of the cylinder.
    boolean addCylinder(in string cylinderName, in float radius, in float height, in Color RGBAcolor) raises (Error);

    /// create a sphere called sphereName
    /// \param input sphereName : name of the sphere.
    /// \param input radius : radius of the sphere.
    /// \param input RGBAcolor : color of the sphere.
    boolean addSphere(in string sphereName, in float radius, in Color RGBAcolor) raises (Error);

    /// create a light called lightName
    /// \param input lightName : name of the light.
    /// \param input radius : radius of the bulb showing the light.
    /// \param input RGBAcolor : color of the light.
    boolean addLight(in string lightName, in WindowID wid, in float radius, in Color RGBAcolor) raises (Error);

    /// create a line called lineName.
    /// \param input lineName : name of the line.
    /// \param input pos1 : position one extremity of the line.
    /// \param input pos2 : position the other extremity of the line.
    /// \param input RGBAcolor : color of the line.
    boolean addLine(in string lineName, in Position pos1, in Position pos2, in Color RGBAcolor) raises (Error);
    
    /// change starting point position of a line.
    /// \param input lineName : name of the line.
    /// \param input pos1 : position of the first extremity of the line.
    boolean setLineStartPoint(in string lineName, in Position pos1) raises (Error);

    /// change terminal point position of a line.
    /// \param input lineName : name of the line.
    /// \param input pos2 : position of the second extremity of the line.
    boolean setLineEndPoint(in string lineName, in Position pos2) raises (Error);
    
    /// change extremity positions of a line.
    /// \param input lineName : name of the line.
    /// \param input pos1 : position one extremity of the line.
    /// \param input pos2 : position of the second extremity of the line.
    boolean setLineExtremalPoints(in string lineName, in Position pos1, in Position pos2) raises (Error);
    
    /// create a curve called curveName.
    /// The curve is the graph of the piecewise linear interpolation between each consecutive pos.
    /// \param input lineName : name of the line.
    /// \param input pos : waypoints of the curve.
    /// \param input RGBAcolor : color of the line.
    boolean addCurve(in string curveName, in PositionSeq pos, in Color RGBAcolor) raises (Error);
    
    /// set points of a curve called curveName.
    /// \param input lineName : name of the line.
    /// \param input pos : waypoints of the curve.
    boolean setCurvePoints(in string curveName, in PositionSeq pos) raises (Error);

    /// \param mode The list of possible GL modes is provided in
    ///             graphics::WindowsManager::setCurveMode.
    ///             From the GL modes, remove "GL_" and put it lower case.
    boolean setCurveMode (in string curveName, in string mode) raises (Error);

    boolean setCurvePointsSubset (in string curveName, in long first, in long count) raises (Error);

    boolean setCurveLineWidth (in string curveName, in float width) raises (Error);

    /// create a four vertices face called faceName.
    /// \param input faceName : name of the face.
    /// \param input pos1, pos2, pos3, pos4 : position of the vertices.
    /// \param input RGBAcolor : color of the face.
    boolean addSquareFace(in string faceName, in Position pos1, in Position pos2, in Position pos3, in Position pos4, in Color RGBAcolor) raises (Error);

    /// Set a texture to a face
    /// \param nodeName name of the node containing the face
    /// \param filename where the image is stored
    /// \note Node should be a square face.
    boolean setTexture (in string nodeName, in string filename) raises (Error);

    /// create a three vertices face called faceName.
    /// \param input faceName : name of the face.
    /// \param input pos1, pos2, pos3 : position of the vertices.
    /// \param input RGBAcolor : color of the face.
    boolean addTriangleFace(in string faceName, in Position pos1, in Position pos2, in Position pos3, in Color RGBAcolor) raises (Error);


		// Add a sphere with xyz axis
		// The colors are x=red, y=green, z=blue (xyz=RGB)
		// \param input nodeName : name of the node
		// \param input RGBAcolor : color of the sphere
		// \param input radius : radius of the sphere
		// \param input sizeAxis : size of the axis (proportionnaly to the sphere radius, size axis = 1 -> axis are radius*4 in length and radius/4 in radius)
		boolean addXYZaxis(in string nodeName, in Color RGBAcolor,in float radius,in float sizeAxis) raises(Error);

		// Add an empty roadmap to the scene
	  // \param input nameCorba : name of the roadmap
	  // \param input RGBAcolorNode : color of the sphere
	  // \param input radius : radius of the sphere
	  // \param input sizeAxis :size of the axis (proportionnaly to the sphere radius, size axis = 1 -> axis are radius*4 in length and radius/4 in radius)
	  // \param input RGBAcolorEdge : color of the edges
    boolean createRoadmap(in string nameCorba,in Color RGBAcolorNode, in float radius, in float sizeAxis, in Color RGBAcolorEdge) raises(Error);

		// Add an edge to the roadmap
	  // \param input nameRoadmap : name of the roadmap
	  // \param input posFrom : position of the beginning of the edge
	  // \param input posTo : position of the end of the edge (not oriented edge, order doesn't matter)
    boolean addEdgeToRoadmap(in string nameRoadmap, in Position posFrom, in Position posTo)raises(Error);

		// Add a node to the roadmap
	  // \param input nameRoadmap : name of the roadmap
	  // \param input configuration : configuration of the node 
    boolean addNodeToRoadmap(in string nameRoadmap, in Transform configuration)raises(Error);

    /// Create a node from an urdf file
    /// \param robotName Name of the node that will contain the robot geometry,
    ///                  each geometric part is prefixed by this name,
    /// \param urdfFilePath to the package containing the urdf file,
    ///                       i.e. "/opt/ros/hydro/share/pr2_description",
    /// \param meshDataRootDir path to the package that contains the collada
    ///                        files, this path should finish by "/",
    ///                        i.e. "/opt/ros/hydro/share/"
    /// \note the parser will replace "package://" by meshDataRootDir in the
    ///       urdf file.
    /// a groupNode is created and each link will be child node of this node.
    /// Links are named "prefix/linkName", linkName is the name of the link
    /// in the URDF file.
    boolean addURDF (in string robotName, in string urdfFilePath,
		     in string meshDataRootDir) raises (Error);

    /// Create a node from an urdf file
    /// \param robotName Name of the node that will contain the robot geometry,
    ///                  each geometric part is prefixed by this name,
    /// \param urdfFilePath to the package containing the urdf file,
    ///                       i.e. "/opt/ros/hydro/share/pr2_description",
    /// \param meshDataRootDir path to the package that contains the collada
    ///                        files, this path should finish by "/",
    ///                        i.e. "/opt/ros/hydro/share/"
    /// \note the parser will replace "package://" by meshDataRootDir in the
    ///       urdf file.
    /// a groupNode is created and each link will be child node of this node.
    /// Links are named "prefix/linkName", linkName is the name of the link
    /// in the URDF file.
    ///
    /// Unlike addURDF, this method will load the collision geometry instead
    /// of the visual geometry.
    boolean addUrdfCollision (in string robotName, in string urdfFilePath,
			      in string meshDataRootDir) raises (Error);

    /// Create a node from an urdf file
    /// \param nodeName Name of the node that will contain the objects,
    ///        each object is prefixed by this name,
    /// \param urdfFilePath to the package containing the urdf file,
    ///        i.e. "/opt/ros/hydro/share/pr2_description",
    /// \param meshDataRootDir path to the package that contains the collada
    ///        files, this path should finish by "/", i.e.
    ///        "/opt/ros/hydro/share/"
    /// \note the parser will replace "package://" by meshDataRootDir in the
    ///       urdf file,
    /// \note visual whether to load collision or visual geometry.
    /// a groupNode is created and each object will be child node of this node.
    /// Objects are named "prefix/linkName", linkName is the name of the link
    /// in the URDF file. Unlike addURDF and addUrdfCollision, the node frame
    /// corresponds to the position of objects hold by the links and not to
    /// the position of objects.
    void addUrdfObjects (in string nodeName, in string urdfFilePath,
			 in string meshDataRootDir, in boolean visual)
      raises (Error);

    /// create a groupNode called groupName
    /// \param input groupName : name of the group.
    boolean createGroup(in string groupName) raises (Error);

    /// \}

    /// \name Node tree manipulation
    /// \anchor idl_node_tree_manipulation
    /// \{

    /// Check if nodeName is an existing node.
    /// \param nodeName name of the node
    boolean nodeExists(in string nodeName) raises (Error);

    /// Delete node from visualiser
    /// \param all if nodeName is a group node and all is True, nodes
    ///        are deleted recursively.
    void deleteNode (in string nodeName, in boolean all) raises (Error);

    /// Print names of nodes on the SceneViewer-corbaserver terminal
    /// and return them in an array
    /// \return the list of node names contained in the scene
    Names_t getNodeList() raises (Error);

    /// Print names of a group nodes on the SceneViewer-corbaserver terminal
    /// and return them in an array
    /// \param input name : name of the new window.
    /// \return the list of node names contained in the group
    Names_t getGroupNodeList(in string group) raises (Error);

    /// Get the list of group (i.e. scene) nodes
    Names_t getSceneList() raises (Error);

    /// Print names of windows on the SceneViewer-corbaserver terminal.
    Names_t getWindowList() raises (Error);

    /// set a node as child to a group node.
    /// \param input nodeName : name of the child node.
    /// \param input groupName : name of the mother node (=group node).
    boolean addToGroup(in string nodeName, in string groupName) raises (Error);

    /// remove the node from the child list of a group node.
    /// \param input nodeName : name of the child node.
    /// \param input groupName : name of the mother node (=group node).
    boolean removeFromGroup(in string nodeName, in string groupName) raises (Error);

    /// \}

    /// \name Node configuration
    /// \anchor idl_node_configuration
    /// \{

    /// Set a new configuration to a node. THIS CONFIGURATION WILL AFFECTIVE ONLY AFTER CALLING REFRESH FUNCTION!!!
    /// \param input nodeName : name of the node.
    /// \param input configuration : Float[7] new configuration.
    boolean applyConfiguration(in string nodeName, in Transform configuration) raises (Error);

    /// Same as \ref applyConfiguration on a list of node name and configuration.
    /// Both input list should be of same length.
    boolean applyConfigurations(in Names_t nodeName, in TransformSeq configuration) raises (Error);

    /// Change configurations according to the last applyConfigurations.d
    void refresh() raises (Error);

    /// Set to false if you do not want refresh to be synchronized
    /// with the rendering loop.
    /// \note This is an experimental features.
    void setRefreshIsSynchronous (in boolean synchonous) raises (Error);
    
    /// Return the Position + Quaternion orientation of an object in the global frame
    /// \param input nodeName : name of the node.
    /// \return a length 7 array
    Transform getNodeGlobalTransform(in string nodeName) raises (Error);

    /// \}

    /// \name Node properties
    /// \anchor idl_node_properties
    /// \{

    /// Add Landmark at the center of a node
    /// The colors are x=red, y=green, z=blue (xyz=RGB).
    /// \param input nodeName : name of the node
    /// \param input size : lenght of axises.
    boolean addLandmark(in string nodeName, in float size) raises (Error);

    /// delete Landmark of a node.
    /// \param input nodeName : name of the node
    boolean deleteLandmark(in string nodeName) raises (Error);

    /// get the static transform of the node
    /// \param input nodeName : name of the node
    Transform getStaticTransform(in string nodeName) raises (Error);
    
    /// set the static transform of the node
    /// \param input nodeName : name of the node
    /// \param input configuration : static configuration of the node
    boolean setStaticTransform(in string nodeName, in Transform configuration) raises (Error);

    /// Change the visibility of a node. If this node is a group node, visibility mode will be apply to all children.
    /// \param input nodeName : name of the node.
    /// \param input visibilityMode : visibility mode can be "ON", "OFF" or "ALWAYS_ON_TOP".
    boolean setVisibility(in string nodeName, in string visibilityMode) raises (Error);
    
       /// Change the scale of a node. 
    /// \param input nodeName : name of the node.
    /// \param input scale : new scale  
    boolean setScale(in string nodeName, in Position scale) raises (Error);
    
    /// Change the color of a node. 
    /// \param input nodeName : name of the node.
    /// \param input color : new color
    boolean setColor(in string nodeName, in Color scale) raises (Error);

    /// Change wireframe mode of a node. If this node is a group node, wireframe mode will be apply to all children.
    /// \param input nodeName : name of the node.
    /// \param input wireframeMode : wiredframe mode can be "FILL", "WIREFRAME" or "FILL_AND_WIREFRAME".
    boolean setWireFrameMode(in string nodeName, in string wireFrameMode) raises (Error);

    /// Change lighting mode of a node. If this node is a group node, lighting mode will be apply to all children.
    /// \param input nodeName : name of the node.
    /// \param input lightingMode : lighting mode can be "ON" or "OFF".
    boolean setLightingMode(in string nodeName, in string lightingMode) raises (Error);

    /// Change the highlight status
    /// \param input nodeName : name of the node.
    /// \param input state : 0 for off, 1 or 2 for other things.
    boolean setHighlight (in string nodeName, in long state) raises (Error);

    Names_t getPropertyNames(in string nodeName) raises (Error);
    Names_t getPropertyTypes(in string nodeName) raises (Error);

    void setStringProperty(in string nodeName, in string propName, in string value) raises (Error);
    string getStringProperty(in string nodeName, in string propName) raises (Error);

    void setColorProperty(in string nodeName, in string propName, in Color value) raises (Error);
    Color getColorProperty(in string nodeName, in string propName) raises (Error);

    void setVector3Property(in string nodeName, in string propName, in Position value) raises (Error);
    Position getVector3Property(in string nodeName, in string propName) raises (Error);

    void setVector2Property(in string nodeName, in string propName, in Vector2 value) raises (Error);
    Position getVector2Property(in string nodeName, in string propName) raises (Error);

    void setFloatProperty(in string nodeName, in string propName, in float value) raises (Error);
    float getFloatProperty(in string nodeName, in string propName) raises (Error);

    void setBoolProperty(in string nodeName, in string propName, in boolean value) raises (Error);
    boolean getBoolProperty(in string nodeName, in string propName) raises (Error);

    void setIntProperty(in string nodeName, in string propName, in long value) raises (Error);
    long getIntProperty(in string nodeName, in string propName) raises (Error);

    /// \}

    /// \name Export of scenes to images or to blender
    /// \anchor idl_export_of_scenes_to_images_or_to_blender
    /// See \ref gepetto.gui.Plugin
    /// \{

    void captureFrame (in WindowID wid, in string imageFilename) raises (Error);

    /// Start capturing a window into image files.
    /// \param windowId the ID of the window
    /// \param filename, extension image files will be
    /// '<filename>_<sequence_number>.<extension>'
    ///
    /// To make a movie from the sequence of images, you can run:
    /// \code{.sh}
    ///   avconv -r 25 -i capture_%6d.png -vf crop=1908:1000:0:0 -r 25 -pix_fmt yuv420p -c:v libx264 ../video2.mp4
    /// \endcode
    /// \note
    /// - \c libx264 is not installed by default. On ubuntu 12.04,
    ///   it is part of the package \c libavcodec-extra-53.
    /// - \c yuv420p is required only to enable support for old media players.
    boolean startCapture (in unsigned long windowId, in string filename,
      in string extension) raises (Error);

    /// Stop the running capture of a window.
    boolean stopCapture (in unsigned long windowId) raises (Error);

    /// Configure the capture of node transformation in YAML format
    /// \param filename file where to write.
    /// \param nodeName name of the node to be captured
    ///        (all children will also be captured)
    boolean setCaptureTransform (in string filename, in Names_t nodeNames)
      raises (Error);

    /// Change status of automatic capture on refresh
    void captureTransformOnRefresh (in boolean autoCapture) raises (Error);

    /// Write current configuration to the motion file
    void captureTransform () raises (Error);

    /// Export the nodes for blender
    ///
    /// Append a python3 script corresponding the nodes,
    /// to be loaded by the blender gepetto plugin.
    boolean writeBlenderScript (in string filename, in Names_t nodeNames) raises (Error);

    /// Write a node and its children to filename
    boolean writeNodeFile (in string nodeName, in string filename) raises (Error);

    /// Write the nodes contained in the window to filename
    boolean writeWindowFile (in unsigned long windowId, in string filename) raises (Error);

    /// \}

    /// \name Camera manipulation
    /// \anchor idl_camera_manipulation
    /// \{

    /// Attach the camera to the Node nodeName in the WindowManager
    /// pointed by windowId
    /// If already attached, detach from the other node
    /// \param input nodeName : name of the node
    /// \param input windowId : ID of the window
    boolean attachCameraToNode(in string nodeName, in unsigned long windowId) raises (Error);

    /// Detach the camera of WindowManager pointed by windowId
    /// from any node
    /// \param input windowId : ID of the window
    boolean detachCamera(in unsigned long windowId) raises (Error);

    /// get the matrix transform of the current position of the camera
    /// \param input windowId : ID of the window
    Transform getCameraTransform(in unsigned long windowId) raises (Error);

    /// set the matrix transform of the current camera
    /// \param input windowId : ID of the window
    /// \param input configuration : the desired configuration of the camera
    boolean setCameraTransform(in unsigned long windowId,in Transform configuration) raises (Error);

    // register a Node callback
    boolean registerNodeCallback (in NodeCallback cb) raises (Error);

    /// \}
  };
};
};
